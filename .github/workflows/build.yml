# This name is also shown in the status badge.
name: Build

on:
  push:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
  # Rebuild periodically to keep the cache alive:
  schedule:
  - cron: '0 */12 * * *'   #每12小时一次

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # SonarCloud: Shallow clones should be disabled for a better relevancy of analysis
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'zulu'
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/*.gradle*', '**/libs.versions.toml', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-m2
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/libs.versions.toml', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle
    - name: Cache Jabba JDK installations
      uses: actions/cache@v4
      with:
        path: ~/.jabba
        key: ${{ runner.os }}-jabba-${{ hashFiles('**/*.sh') }}
        restore-keys: |
          ${{ runner.os }}-jabba
    - name: Cache SonarCloud packages
      if: github.event_name != 'pull_request'
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
    - name: Build Shopkeepers
      run: ./build.sh
    
    # 设置日期作为标签名
    - name: Set date as tag name
      id: set_tag
      run: |
        DATE=$(date +'%Y%m%d-%H%M%S')  # 使用更精确的时间格式，包含秒
        echo "TAG_NAME=shopkeepers-build-$DATE" >> $GITHUB_ENV
        echo "Generated Tag: ${{ env.TAG_NAME }}"
    
    # 验证构建产物
    - name: Verify Artifacts
      run: |
        ls -la ./build/
        
        # 检查构建产物是否存在
        if ! ls ./build/*.jar 1> /dev/null 2>&1; then
          echo "::error::No JAR files found in build/"
          exit 1
        fi

        echo "Build artifacts verified successfully"
    
    # 上传构建产物到 Artifacts (保留原有的上传步骤)
    - name: Stage artifacts for upload
      run: mkdir -p staging && cp build/*.jar staging/
    - name: Upload artifacts to workflow
      uses: actions/upload-artifact@v4
      with:
        name: Shopkeepers Artifacts
        path: staging
        retention-days: 30
    
    # 创建 Git 标签 (仅在非PR事件时执行)
    - name: Create Git Tag
      if: github.event_name != 'pull_request'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "${{ env.TAG_NAME }}" -m "Automated Shopkeepers build ${{ env.TAG_NAME }}"
        git push origin "${{ env.TAG_NAME }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    # 创建 Release (仅在非PR事件时执行)
    - name: Create Release
      if: github.event_name != 'pull_request'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.TAG_NAME }}
        name: "Shopkeepers Build ${{ env.TAG_NAME }}"
        body: "Automated build of Shopkeepers from ${{ github.ref_name }} branch"
        files: build/*.jar
        prerelease: true
        draft: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
